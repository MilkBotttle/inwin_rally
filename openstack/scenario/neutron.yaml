  Authenticate.validate_neutron:
    -
      args:
        repetitions: 2
      context:
        {{ user_context(tenants_amount, users_amount, use_existing_users) }}
      runner:
        {{ constant_runner(concurrency=2*controllers_amount, times=8*controllers_amount, is_smoke=smoke) }}
      sla:
        {{ no_failures_sla() }}

  NeutronNetworks.create_and_delete_networks:
    -
      args:
        network_create_args: {}
      context:
        {% call user_context(tenants_amount, users_amount, use_existing_users) %}
        quotas:
          neutron:
            network: -1
        {% endcall %}
      runner:
        {{ constant_runner(concurrency=2*controllers_amount, times=8*controllers_amount, is_smoke=smoke) }}
      sla:
        {{ no_failures_sla() }}

  NeutronNetworks.create_and_delete_ports:
    -
      args:
        network_create_args: {}
        port_create_args: {}
        ports_per_network: 1
      context:
        {% call user_context(tenants_amount, users_amount, use_existing_users) %}
        quotas:
          neutron:
            network: -1
            port: -1
        {% endcall %}
      runner:
        {{ constant_runner(concurrency=2*controllers_amount, times=8*controllers_amount, is_smoke=smoke) }}
      sla:
        {{ no_failures_sla() }}

  NeutronNetworks.create_and_delete_routers:
    -
      args:
        network_create_args: {}
        router_create_args: {}
        subnet_cidr_start: "1.1.0.0/30"
        subnet_create_args: {}
        subnets_per_network: 1
      context:
        {% call user_context(tenants_amount, users_amount, use_existing_users) %}
        quotas:
          neutron:
            network: -1
            subnet: -1
            port: -1
            router: -1
        {% endcall %}
      runner:
        {{ constant_runner(concurrency=2*controllers_amount, times=8*controllers_amount, is_smoke=smoke) }}
      sla:
        {{ no_failures_sla() }}

  NeutronNetworks.create_and_delete_subnets:
    -
      args:
        network_create_args: {}
        subnet_cidr_start: "1.1.0.0/30"
        subnet_create_args: {}
        subnets_per_network: 1
      context:
        {% call user_context(tenants_amount, users_amount, use_existing_users) %}
        quotas:
          neutron:
            network: -1
            subnet: -1
        {% endcall %}
      runner:
        {{ constant_runner(concurrency=2*controllers_amount, times=8*controllers_amount, is_smoke=smoke) }}
      sla:
        {{ no_failures_sla() }}

  NeutronNetworks.create_and_list_networks:
    -
      args:
        network_create_args: {}
      context:
        {% call user_context(tenants_amount, users_amount, use_existing_users) %}
        quotas:
          neutron:
            network: -1
        {% endcall %}
      runner:
        {{ constant_runner(concurrency=2*controllers_amount, times=8*controllers_amount, is_smoke=smoke) }}
      sla:
        {{ no_failures_sla() }}

  NeutronNetworks.create_and_list_ports:
    -
      args:
        network_create_args: {}
        port_create_args: {}
        ports_per_network: 1
      context:
        {% call user_context(tenants_amount, users_amount, use_existing_users) %}
        quotas:
          neutron:
            network: -1
            port: -1
        {% endcall %}
      runner:
        {{ constant_runner(concurrency=2*controllers_amount, times=8*controllers_amount, is_smoke=smoke) }}
      sla:
        {{ no_failures_sla() }}

  NeutronNetworks.create_and_list_routers:
    -
      args:
        network_create_args: {}
        router_create_args: {}
        subnet_cidr_start: "1.1.0.0/30"
        subnet_create_args: {}
        subnets_per_network: 1
      context:
        {% call user_context(tenants_amount, users_amount, use_existing_users) %}
        quotas:
          neutron:
            network: -1
            subnet: -1
            router: -1
        {% endcall %}
      runner:
        {{ constant_runner(concurrency=2*controllers_amount, times=8*controllers_amount, is_smoke=smoke) }}
      sla:
        {{ no_failures_sla() }}

  NeutronNetworks.create_and_list_subnets:
    -
      args:
        network_create_args: {}
        subnet_cidr_start: "1.1.0.0/30"
        subnet_create_args: {}
        subnets_per_network: 1
      context:
        {% call user_context(tenants_amount, users_amount, use_existing_users) %}
        quotas:
          neutron:
            network: -1
            subnet: -1
        {% endcall %}
      runner:
        {{ constant_runner(concurrency=2*controllers_amount, times=8*controllers_amount, is_smoke=smoke) }}
      sla:
        {{ no_failures_sla() }}

  NeutronNetworks.create_and_update_networks:
    -
      args:
        network_create_args: {}
        network_update_args:
          admin_state_up: false
          name: "_updated"
      context:
        {% call user_context(tenants_amount, users_amount, use_existing_users) %}
        quotas:
          neutron:
            network: -1
        {% endcall %}
      runner:
        {{ constant_runner(concurrency=2*controllers_amount, times=8*controllers_amount, is_smoke=smoke) }}
      sla:
        {{ no_failures_sla() }}

  NeutronNetworks.create_and_update_ports:
    -
      args:
        network_create_args: {}
        port_create_args: {}
        port_update_args:
          admin_state_up: false
          device_id: "dummy_id"
          device_owner: "dummy_owner"
          name: "_port_updated"
        ports_per_network: 1
      context:
        {% call user_context(tenants_amount, users_amount, use_existing_users) %}
        quotas:
          neutron:
            network: -1
            port: -1
        {% endcall %}
      runner:
        {{ constant_runner(concurrency=2*controllers_amount, times=8*controllers_amount, is_smoke=smoke) }}
      sla:
        {{ no_failures_sla() }}

  NeutronNetworks.create_and_update_routers:
    -
      args:
        network_create_args: {}
        router_create_args: {}
        router_update_args:
          admin_state_up: false
          name: "_router_updated"
        subnet_cidr_start: "1.1.0.0/30"
        subnet_create_args: {}
        subnets_per_network: 1
      context:
        {% call user_context(tenants_amount, users_amount, use_existing_users) %}
        quotas:
          neutron:
            network: -1
            subnet: -1
            port: -1
            router: -1
        {% endcall %}
      runner:
        {{ constant_runner(concurrency=2*controllers_amount, times=8*controllers_amount, is_smoke=smoke) }}
      sla:
        {{ no_failures_sla() }}

  NeutronNetworks.create_and_update_subnets:
    -
      args:
        network_create_args: {}
        subnet_cidr_start: "1.4.0.0/16"
        subnet_create_args: {}
        subnet_update_args:
          enable_dhcp: false
          name: "_subnet_updated"
        subnets_per_network: 1
      context:
        {% call user_context(tenants_amount, users_amount, use_existing_users) %}
        quotas:
          neutron:
            network: -1
            subnet: -1
        {% endcall %}
      runner:
        {{ constant_runner(concurrency=2*controllers_amount, times=8*controllers_amount, is_smoke=smoke) }}
      sla:
        {{ no_failures_sla() }}

  NeutronNetworks.associate_and_dissociate_floating_ips:
    -
      args:
        floating_network: {{ external_network_name }}
      context:
        {% call user_context(tenants_amount, users_amount, use_existing_users) %}
        quotas:
          neutron:
            network: -1
            subnet: -1
            port: -1
            router: -1
            floatingip: -1
        {% endcall %}
      runner:
        {{ constant_runner(concurrency=2*controllers_amount, times=8*controllers_amount, is_smoke=smoke) }}
      sla:
        {{ no_failures_sla() }}

  NeutronNetworks.create_and_bind_ports:
    -
      args:
        ports_per_network: 5
      context:
        roles:
          - admin
        network: {}
        networking_agents: {}
        quotas:
          neutron:
            network: -1
            subnet: -1
            port: -1
      runner:
        {{ constant_runner(concurrency=2*controllers_amount, times=8*controllers_amount, is_smoke=smoke) }}
      sla:
        {{ no_failures_sla() }}

  NeutronNetworks.create_and_delete_floating_ips:
    -
      args:
        floating_network: {{ external_network_name }}
      context:
        quotas:
          neutron:
            floatingip: -1
      runner:
        {{ constant_runner(concurrency=2*controllers_amount, times=8*controllers_amount, is_smoke=smoke) }}
      sla:
        {{ no_failures_sla() }}

  NeutronNetworks.create_and_list_floating_ips:
    -
      args:
        floating_network: {{ external_network_name }}
      context:
        quotas:
          neutron:
            floatingip: -1
      runner:
        {{ constant_runner(concurrency=2*controllers_amount, times=8*controllers_amount, is_smoke=smoke) }}
      sla:
        {{ no_failures_sla() }}

  NeutronNetworks.create_and_show_network:
    -
      context:
        quotas:
          neutron:
            network: -1
      runner:
        {{ constant_runner(concurrency=2*controllers_amount, times=8*controllers_amount, is_smoke=smoke) }}
      sla:
        {{ no_failures_sla() }}

  NeutronNetworks.create_and_show_ports:
    -
      args:
        ports_per_network: 2
      context:
        quotas:
          neutron:
            network: -1
            port: -1
      runner:
        {{ constant_runner(concurrency=2*controllers_amount, times=8*controllers_amount, is_smoke=smoke) }}
      sla:
        {{ no_failures_sla() }}

  NeutronNetworks.create_and_show_routers:
    -
      args:
        subnets_per_network: 2
      context:
        quotas:
          neutron:
            network: -1
            subnet: -1
            router: -1
      runner:
        {{ constant_runner(concurrency=2*controllers_amount, times=8*controllers_amount, is_smoke=smoke) }}
      sla:
        {{ no_failures_sla() }}

  NeutronNetworks.create_and_show_subnets:
    -
      args:
        subnets_per_network: 2
      context:
        quotas:
          neutron:
            network: -1
            subnet: -1
      runner:
        {{ constant_runner(concurrency=2*controllers_amount, times=8*controllers_amount, is_smoke=smoke) }}
      sla:
        {{ no_failures_sla() }}

  NeutronNetworks.list_agents:
    -
      runner:
        {{ constant_runner(concurrency=2*controllers_amount, times=8*controllers_amount, is_smoke=smoke) }}
      sla:
        {{ no_failures_sla() }}

  NeutronNetworks.set_and_clear_router_gateway:
    -
      args:
        network_create_args:
          router:external: True
      context:
        roles: ["admin"]
        quotas:
          neutron:
            network: -1
            router: -1
      runner:
        {{ constant_runner(concurrency=2*controllers_amount, times=8*controllers_amount, is_smoke=smoke) }}
      sla:
        {{ no_failures_sla() }}
