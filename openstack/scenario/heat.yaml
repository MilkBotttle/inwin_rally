  HeatStacks.create_and_list_stack:
    -
      args:
        template_path: "/root/openstack/templates/default.yaml.template"
      context:
        {{ user_context(tenants_amount, users_amount, use_existing_users) }}
      runner:
        {{ constant_runner(concurrency=min(50, 2*controllers_amount),times=min(200, 67*controllers_amount), is_smoke=smoke) }}
      sla:
        {{ no_failures_sla() }}

  HeatStacks.create_and_delete_stack:
    -
      args:
        template_path: "/root/openstack/templates/default.yaml.template"
      context:
        {{ user_context(tenants_amount, users_amount, use_existing_users) }}
      runner:
        {{ constant_runner(concurrency=min(50, 2*controllers_amount),times=min(200, 67*controllers_amount), is_smoke=smoke) }}
      sla:
        {{ no_failures_sla() }}

  HeatStacks.create_check_delete_stack:
    -
      args:
        template_path: "/root/openstack/templates/default.yaml.template"
      context:
        {{ user_context(tenants_amount, users_amount, use_existing_users) }}
      runner:
        {{ constant_runner(concurrency=min(50, 2*controllers_amount),times=min(200, 67*controllers_amount), is_smoke=smoke) }}
      sla:
        {{ no_failures_sla() }}

  HeatStacks.create_update_delete_stack:
    -
      args:
        template_path: "/root/openstack/templates/random_strings.yaml.template"
        updated_template_path: "/root/openstack/templates/updated_random_strings_add.yaml.template"
      context:
        {{ user_context(tenants_amount, users_amount, use_existing_users) }}
      runner:
        {{ constant_runner(concurrency=min(50, 2*controllers_amount),times=min(200, 67*controllers_amount), is_smoke=smoke) }}
      sla:
        {{ no_failures_sla() }}

  HeatStacks.create_suspend_resume_delete_stack:
    -
      args:
        template_path: "/root/openstack/templates/random_strings.yaml.template"
      context:
        {{ user_context(tenants_amount, users_amount, use_existing_users) }}
      runner:
        {{ constant_runner(concurrency=min(50, 2*controllers_amount),times=min(200, 67*controllers_amount), is_smoke=smoke) }}
      sla:
        {{ no_failures_sla() }}

  HeatStacks.create_snapshot_restore_delete_stack:
    -
      args:
        template_path: "/root/openstack/templates/random_strings.yaml.template"
      context:
        {{ user_context(tenants_amount, users_amount, use_existing_users) }}
      runner:
        {{ constant_runner(concurrency=min(50, 2*controllers_amount),times=min(200, 67*controllers_amount), is_smoke=smoke) }}
      sla:
        {{ no_failures_sla() }}

  HeatStacks.create_stack_and_list_output:
    -
      args:
        template_path: "/root/openstack/templates/resource_group_with_outputs.yaml.template"
      context:
        {{ user_context(tenants_amount, users_amount, use_existing_users) }}
      runner:
        {{ constant_runner(concurrency=min(50, 2*controllers_amount),times=min(200, 67*controllers_amount), is_smoke=smoke) }}
      sla:
        {{ no_failures_sla() }}

  HeatStacks.create_stack_and_list_output_via_API:
    -
      args:
        template_path: "/root/openstack/templates/resource_group_with_outputs.yaml.template"
      context:
        {{ user_context(tenants_amount, users_amount, use_existing_users) }}
      runner:
        {{ constant_runner(concurrency=min(50, 2*controllers_amount),times=min(200, 67*controllers_amount), is_smoke=smoke) }}
      sla:
        {{ no_failures_sla() }}

  HeatStacks.create_stack_and_show_output:
    -
      args:
        template_path: "/root/openstack/templates/resource_group_with_outputs.yaml.template"
        output_key: val1
      context:
        {{ user_context(tenants_amount, users_amount, use_existing_users) }}
      runner:
        {{ constant_runner(concurrency=min(50, 2*controllers_amount),times=min(200, 67*controllers_amount), is_smoke=smoke) }}
      sla:
        {{ no_failures_sla() }}

  HeatStacks.create_stack_and_show_output_via_API:
    -
      args:
        template_path: "/root/openstack/templates/resource_group_with_outputs.yaml.template"
        output_key: val1
      context:
        {{ user_context(tenants_amount, users_amount, use_existing_users) }}
      runner:
        {{ constant_runner(concurrency=min(50, 2*controllers_amount),times=min(200, 67*controllers_amount), is_smoke=smoke) }}
      sla:
        {{ no_failures_sla() }}

  Authenticate.validate_heat:
    -
      args:
        repetitions: 2
      context:
        {{ user_context(tenants_amount, users_amount, use_existing_users) }}
      runner:
        {{ constant_runner(concurrency=min(50, 2*controllers_amount),times=min(200, 67*controllers_amount), is_smoke=smoke) }}
      sla:
        {{ no_failures_sla() }}
